#!/bin/bash

# List of useful colors
COLOR_RESET="\033[0m"
COLOR_INFO="\033[0;32m"   # Green
COLOR_ITEM="\033[0;34m"
COLOR_QUES="\033[0;35m"
COLOR_WARN="\033[0;33m"   # Yellow
COLOR_ERROR="\033[0;31m"  # Red
COLOR_BOLD="\033[1m"
COLOR_UNDE="\033[4m"

# Function to print info messages
print_info() {
  echo -e "${COLOR_INFO}${COLOR_BOLD}[INFO] $1${COLOR_RESET}"
}

# Function to print warning messages
print_warn() {
  echo -e "${COLOR_WARN}${COLOR_BOLD}[WARN] $1${COLOR_RESET}"
}

# Function to print error messages
print_error() {
  echo -e "${COLOR_ERROR}${COLOR_BOLD}[ERROR] $1${COLOR_RESET}"
}

# Example usage:
# print_info "This is an info message"
# print_warn "This is a warning message"
# print_error "This is an error message"

function wolf_banner()
{
echo -e "${COLOR_BOLD}
###########################################
#                                         #
#                  WoLF                   #
#                                         #
#  https://github.com/graiola/wolf-setup  #
#                       .                 #
#                      / V\               #
#                    / .  /               #
#                   <<   |                #
#                   /    |                #
#                 /      |                #
#               /        |                #
#             /    \  \ /                 #
#            (      ) | |                 #
#    ________|   _/_  | |                 #
#  <__________\______)\__)                #
#                                         #
###########################################
${COLOR_RESET}"
}

# parse yaml files and create bash variables
function parse_yaml(){
    local prefix=$2
    local s
    local w
    local fs
    s='[[:space:]]*'
    w='[a-zA-Z0-9_]*'
    fs="$(echo @|tr @ '\034')"
    sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s[:-]$s\(.*\)$s\$|\1$fs\2$fs\3|p" "$1" |
    awk -F"$fs" '{
    indent = length($1)/2;
    vname[indent] = $2;
    for (i in vname) {if (i > indent) {delete vname[i]}}
        if (length($3) > 0) {
            vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
            printf("%s%s%s=(\"%s\")\n", "'"$prefix"'",vn, $2, $3);
        }
    }' | sed 's/_=/+=/g'
}

function create_yaml_variables(){
    local yaml_file="$1"
    eval "$(parse_yaml "$yaml_file")"
}

function clean_file(){
    if [ -f $1 ] ; then
       rm -rf $1
    fi
}

function clean_folder(){
    if [ -d $1 ] ; then
       rm -rf $1
    fi
}


